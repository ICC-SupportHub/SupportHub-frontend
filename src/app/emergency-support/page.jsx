'use client'
import Link from 'next/link'
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { Badge } from '@/components/ui/badge'
import {
  PhoneIcon,
  MessageSquareIcon,
  ExternalLinkIcon,
  AlertTriangleIcon,
  UsersIcon,
  HeartIcon,
  HelpCircleIcon,
  RefreshCwIcon,
  Copy,
  InfoIcon,
} from 'lucide-react'
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from '@/components/ui/tooltip'
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from '@/components/ui/popover'
import { toast } from 'sonner'
import { useEffect, useState, useRef } from 'react'
import EmergencyFlowchart from '@/app/emergency-support/components/emergency-flowchart'
import FAQSection from '@/app/emergency-support/components/faq-section'
import SpecializedServices from '@/app/emergency-support/components/specialized-services'
import BreathingExercise from '@/app/emergency-support/components/breathing-exercise'
import RegionalServices from '@/app/emergency-support/components/regional-services'

const EmergencyPage = () => {
  const [animalStates, setAnimalStates] = useState({
    cat: { showImage: false, imageUrl: '', loading: false },
    dog: { showImage: false, imageUrl: '', loading: false },
  })
  const [isVisible, setIsVisible] = useState(false)
  const [breathingOpen, setBreathingOpen] = useState(false)
  const [activeTab, setActiveTab] = useState('emergency')
  const [indicatorStyle, setIndicatorStyle] = useState({ width: 0, left: 0 })
  const tabRefs = useRef({})

  const copyNumber = async (n) => {
    try {
      await navigator.clipboard.writeText(n)
      toast.success('Î≤àÌò∏Í∞Ä Î≥µÏÇ¨ÎêêÏñ¥Ïöî')
    } catch {
      toast.error('Î≥µÏÇ¨Ïóê Ïã§Ìå®ÌñàÏñ¥Ïöî')
    }
  }

  const emergencyContacts = [
    {
      name: 'Ï≤≠ÏÜåÎÖÑÏ†ÑÌôî 1388',
      number: '1388',
      description:
        'Ï≤≠ÏÜåÎÖÑ Í¥ÄÎ†® Í≥†ÎØº/ÎèÑÏõÄ 365Ïùº 24ÏãúÍ∞Ñ. Î¨∏Ïûê(#1388)\nÏπ¥Ïπ¥Ïò§ÌÜ°(#1388)ÎèÑ Í∞ÄÎä•',
      type: 'Ï†ÑÌôî',
    },
    {
      name: 'Ï≤≠ÏÜåÎÖÑ ÏÇ¨Ïù¥Î≤ÑÏÉÅÎã¥ÏÑºÌÑ∞',
      number: 'www.cyber1388.kr',
      description: 'ÏùµÎ™Ö Ï±ÑÌåÖ ÏÉÅÎã¥ Í∞ÄÎä• (24ÏãúÍ∞Ñ)',
      type: 'Ïò®ÎùºÏù∏',
    },
    {
      name: 'Ï†ïÏã†Í±¥Í∞ï ÏÉÅÎã¥Ï†ÑÌôî',
      number: '1577-0199',
      description: 'Ï†ïÏã† Í±¥Í∞ï Î∞è ÏúÑÍ∏∞ ÏÉÅÎã¥ 24ÏãúÍ∞Ñ (Ï†ÑÍµ≠, ÏßÄÏó≠Î≤àÌò∏ ÏóÜÏù¥)',
      type: 'Ï†ÑÌôî',
    },
    {
      name: 'Î≥¥Í±¥Î≥µÏßÄÏÉÅÎã¥ÏÑºÌÑ∞',
      number: '129',
      description: 'Í∏¥Í∏âÎ≥µÏßÄ, Î≥µÏßÄÏÇ¨Í∞ÅÏßÄÎåÄ, ÌïôÎåÄ Í¥ÄÎ†® ÏÉÅÎã¥ 24ÏãúÍ∞Ñ',
      type: 'Ï†ÑÌôî',
    },
    {
      name: 'ÏûêÏÇ¥ÏòàÎ∞© ÏÉÅÎã¥Ï†ÑÌôî',
      number: '109',
      description: 'ÏûêÏÇ¥ Í¥ÄÎ†® ÏÉÅÎã¥ 24ÏãúÍ∞Ñ',
      type: 'Ï†ÑÌôî',
    },
    {
      name: 'ÏÉùÎ™ÖÏùòÏ†ÑÌôî',
      number: '1588-9191',
      description: 'ÏûêÏÇ¥ ÏòàÎ∞© ÏÉÅÎã¥ 24ÏãúÍ∞Ñ',
      type: 'Ï†ÑÌôî',
    },
  ]

  const selfCareResources = [
    {
      title: 'Ìò∏Ìù° Ïö¥Îèô',
      description: '4-7-8 Ìò∏Ìù°Î≤ïÏúºÎ°ú ÎßàÏùåÏùÑ ÏßÑÏ†ïÏãúÏºúÎ≥¥ÏÑ∏Ïöî',
      action: 'ÏßÄÍ∏à ÏãúÏûëÌïòÍ∏∞',
      detail:
        '4Ï¥à ÎèôÏïà Ïà®ÏùÑ Îì§Ïù¥ÎßàÏãúÍ≥†, 7Ï¥à ÎèôÏïà Ï∞∏ÏùÄ ÌõÑ, 8Ï¥à ÎèôÏïà Ï≤úÏ≤úÌûà ÎÇ¥Ïâ¨ÏÑ∏Ïöî. Ïù¥Î•º 4Ìöå Î∞òÎ≥µÌï©ÎãàÎã§.',
      type: 'breath',
    },
    {
      title: 'Í∏çÏ†ïÏ†Å ÏÉùÍ∞Å',
      description: 'ÏßÄÍ∏à Ïù¥ ÏàúÍ∞Ñ Í∞êÏÇ¨Ìïú Í≤É 3Í∞ÄÏßÄÎ•º Îñ†Ïò¨Î†§Î≥¥ÏÑ∏Ïöî',
      action: 'ÏÉùÍ∞ÅÌï¥Î≥¥Í∏∞',
      detail:
        'ÏûëÏùÄ Í≤ÉÏù¥ÎùºÎèÑ Ï¢ãÏäµÎãàÎã§. Îî∞ÎúªÌïú Ï∞® Ìïú Ïûî, Ìé∏ÏïàÌïú Ïπ®ÎåÄ, ÎÇòÎ•º Í±±Ï†ïÌï¥Ï£ºÎäî ÏÇ¨Îûå Îì±ÏùÑ Îñ†Ïò¨Î†§Î≥¥ÏÑ∏Ïöî.',
    },
    {
      title: 'ÏïàÏ†ÑÌïú Ïû•ÏÜå',
      description:
        'Ïã†Î¢∞Ìï† Ïàò ÏûàÎäî ÏÇ¨ÎûåÏóêÍ≤å Ïó∞ÎùΩÌïòÍ±∞ÎÇò ÏïàÏ†ÑÌïú Í≥≥ÏúºÎ°ú Ïù¥ÎèôÌïòÏÑ∏Ïöî',
      action: 'ÎèÑÏõÄ ÏöîÏ≤≠ÌïòÍ∏∞',
      detail:
        'Í∞ÄÏ°±, ÏπúÍµ¨, ÎèôÎ£å Ï§ë ÎØøÏùÑ Ïàò ÏûàÎäî ÏÇ¨ÎûåÏóêÍ≤å Ïó∞ÎùΩÌïòÍ±∞ÎÇò, Í≥µÍ≥µÏû•ÏÜåÎÇò Î≥ëÏõê Îì± ÏïàÏ†ÑÌïú Í≥≥ÏúºÎ°ú Ïù¥ÎèôÌïòÏÑ∏Ïöî.',
    },
    {
      title: 'üê± Í∑ÄÏó¨Ïö¥ Í≥†ÏñëÏù¥ Î≥¥Í∏∞',
      description: 'ÏÇ¨ÎûëÏä§Îü¨Ïö¥ Í≥†ÏñëÏù¥ ÏÇ¨ÏßÑÏúºÎ°ú ÎßàÏùåÏùÑ Îã¨ÎûòÎ≥¥ÏÑ∏Ïöî',
      action: 'Í≥†ÏñëÏù¥ Î≥¥Í∏∞',
      detail: 'ÎûúÎç§Ìïú Í≥†ÏñëÏù¥ ÏÇ¨ÏßÑÏúºÎ°ú ÎßàÏùåÏùÑ Ìé∏ÏïàÌïòÍ≤å Ìï¥Î≥¥ÏÑ∏Ïöî!',
      type: 'cat',
    },
    {
      title: 'üê∂ Í∑ÄÏó¨Ïö¥ Í∞ïÏïÑÏßÄ Î≥¥Í∏∞',
      description: 'ÏÇ¨ÎûëÏä§Îü¨Ïö¥ Í∞ïÏïÑÏßÄ ÏÇ¨ÏßÑÏúºÎ°ú ÎßàÏùåÏùÑ Îî∞ÎúªÌïòÍ≤å ÌïòÏÑ∏Ïöî',
      action: 'Í∞ïÏïÑÏßÄ Î≥¥Í∏∞',
      detail: 'ÎûúÎç§Ìïú Í∞ïÏïÑÏßÄ ÏÇ¨ÏßÑÏúºÎ°ú ÎßàÏùåÏùÑ Îî∞ÎúªÌïòÍ≤å Ìï¥Î≥¥ÏÑ∏Ïöî!',
      type: 'dog',
    },
    {
      title: '5-4-3-2-1 Í∏∞Î≤ï',
      description: 'ÌòÑÏû¨ ÏàúÍ∞ÑÏóê ÏßëÏ§ëÌïòÏó¨ Î∂àÏïàÍ∞êÏùÑ Ï§ÑÏó¨Î≥¥ÏÑ∏Ïöî',
      action: 'ÏãúÏûëÌïòÍ∏∞',
      detail:
        'Î≥¥Ïù¥Îäî Í≤É 5Í∞ú, ÎßåÏßà Ïàò ÏûàÎäî Í≤É 4Í∞ú, Îì§Î¶¨Îäî Í≤É 3Í∞ú, ÎÉÑÏÉàÎÇòÎäî Í≤É 2Í∞ú, ÎßõÎ≥¥Îäî Í≤É 1Í∞úÎ•º Ï∞æÏïÑÎ≥¥ÏÑ∏Ïöî.',
    },
    {
      title: 'Îî∞ÎúªÌïú ÏÉ§Ïõå',
      description: 'Îî∞ÎúªÌïú Î¨ºÎ°ú Î™∏Í≥º ÎßàÏùåÏùÑ Ïù¥ÏôÑÏãúÏºúÎ≥¥ÏÑ∏Ïöî',
      action: 'ÏãúÎèÑÌï¥Î≥¥Í∏∞',
      detail:
        'Îî∞ÎúªÌïú Î¨ºÏùò Ïò®ÎèÑÏôÄ Í∞êÏ¥âÏóê ÏßëÏ§ëÌïòÎ©∞ Í∏¥Ïû•ÏùÑ ÌíÄÏñ¥Î≥¥ÏÑ∏Ïöî. 10-15Î∂Ñ Ï†ïÎèÑÍ∞Ä Ï†ÅÎãπÌï©ÎãàÎã§.',
    },
    {
      title: 'ÏùåÏïÖ Îì£Í∏∞',
      description: 'Ï¢ãÏïÑÌïòÎäî ÏùåÏïÖÏù¥ÎÇò ÏûêÏó∞ ÏÜåÎ¶¨Î•º Îì§Ïñ¥Î≥¥ÏÑ∏Ïöî',
      action: 'ÏùåÏïÖ Ïû¨ÏÉù',
      detail:
        'ÌÅ¥ÎûòÏãù, ÏûêÏó∞ ÏÜåÎ¶¨, Ï¢ãÏïÑÌïòÎäî ÎÖ∏Îûò Îì± ÎßàÏùåÏùÑ Ìé∏ÏïàÌïòÍ≤å Ìï¥Ï£ºÎäî ÏùåÏïÖÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî.',
    },
  ]

  // Í≥†ÏñëÏù¥ Ïù¥ÎØ∏ÏßÄ Í∞ÄÏ†∏Ïò§Í∏∞ Ìï®Ïàò
  const fetchCatImage = async (apiType) => {
    setAnimalStates((prev) => ({
      ...prev,
      cat: { ...prev.cat, loading: true, selectedApi: apiType },
    }))

    try {
      const timestamp = Date.now()
      let catUrl = ''

      switch (apiType) {
        case 'cataas':
          catUrl = `https://cataas.com/cat?${timestamp}`
          break
        case 'thecat':
          try {
            const response = await fetch(
              'https://api.thecatapi.com/v1/images/search'
            )
            if (!response.ok) throw new Error(`HTTP ${response.status}`)
            const data = await response.json()
            if (data && data[0] && data[0].url) {
              catUrl = data[0].url
            } else {
              throw new Error('The Cat API ÏùëÎãµ Ïò§Î•ò')
            }
          } catch (error) {
            catUrl = `https://cataas.com/cat?${timestamp}`
          }
          break
        case 'randomcat':
          try {
            const response = await fetch(
              `https://api.thecatapi.com/v1/images/search?limit=1&${timestamp}`
            )
            if (!response.ok) throw new Error(`HTTP ${response.status}`)
            const data = await response.json()
            if (data && data[0] && data[0].url) {
              catUrl = data[0].url
            } else {
              throw new Error('Random Cat API ÏùëÎãµ Ïò§Î•ò')
            }
          } catch (error) {
            catUrl = `https://cataas.com/cat?${timestamp}`
          }
          break
        default:
          catUrl = `https://cataas.com/cat?${timestamp}`
      }

      if (catUrl.startsWith('http')) {
        const img = new Image()
        img.crossOrigin = 'anonymous'

        img.onload = () => {
          setAnimalStates((prev) => ({
            ...prev,
            cat: {
              showImage: true,
              imageUrl: catUrl,
              loading: false,
              selectedApi: apiType,
            },
          }))
        }

        img.onerror = () => {
          setAnimalStates((prev) => ({
            ...prev,
            cat: {
              showImage: true,
              imageUrl: `https://cataas.com/cat?${Date.now()}`,
              loading: false,
              selectedApi: apiType,
            },
          }))
        }

        img.src = catUrl
      } else {
        setAnimalStates((prev) => ({
          ...prev,
          cat: {
            showImage: true,
            imageUrl: catUrl,
            loading: false,
            selectedApi: apiType,
          },
        }))
      }
    } catch (error) {
      setAnimalStates((prev) => ({
        ...prev,
        cat: {
          showImage: true,
          imageUrl: `https://cataas.com/cat?${Date.now()}`,
          loading: false,
          selectedApi: apiType,
        },
      }))
    }
  }

  // Í∞ïÏïÑÏßÄ Ïù¥ÎØ∏ÏßÄ Í∞ÄÏ†∏Ïò§Í∏∞ Ìï®Ïàò
  const fetchDogImage = async (apiType) => {
    setAnimalStates((prev) => ({
      ...prev,
      dog: { ...prev.dog, loading: true, selectedApi: apiType },
    }))

    try {
      let dogUrl = ''

      switch (apiType) {
        case 'dogceo':
          try {
            const response = await fetch(
              'https://dog.ceo/api/breeds/image/random'
            )
            if (!response.ok) throw new Error(`HTTP ${response.status}`)
            const data = await response.json()
            if (data && data.status === 'success' && data.message) {
              dogUrl = data.message
            } else {
              throw new Error('Dog CEO API ÏùëÎãµ Ïò§Î•ò')
            }
          } catch (error) {
            throw error
          }
          break

        case 'dogfacts':
          try {
            const response = await fetch(
              'https://some-random-api.com/animal/dog'
            )
            if (!response.ok) throw new Error(`HTTP ${response.status}`)
            const data = await response.json()
            if (data && data.image) {
              dogUrl = data.image
            } else {
              throw new Error('Dog Facts API ÏùëÎãµ Ïò§Î•ò')
            }
          } catch (error) {
            const fallbackResponse = await fetch(
              'https://dog.ceo/api/breeds/image/random'
            )
            const fallbackData = await fallbackResponse.json()
            dogUrl = fallbackData.message
          }
          break

        case 'shibe':
          try {
            const response = await fetch(
              'https://shibe.online/api/shibes?count=1&urls=true&httpsUrls=true'
            )
            if (!response.ok) throw new Error(`HTTP ${response.status}`)
            const data = await response.json()
            if (data && Array.isArray(data) && data.length > 0) {
              dogUrl = data[0]
            } else {
              throw new Error('Shibe API ÏùëÎãµ Ïò§Î•ò')
            }
          } catch (error) {
            const fallbackResponse = await fetch(
              'https://dog.ceo/api/breeds/image/random'
            )
            const fallbackData = await fallbackResponse.json()
            dogUrl = fallbackData.message
          }
          break

        case 'randomdog':
          try {
            const apiOptions = [
              {
                url: 'https://random.dog/woof.json',
                handler: async (response) => {
                  const data = await response.json()
                  if (
                    data &&
                    data.url &&
                    !data.url.includes('.mp4') &&
                    !data.url.includes('.webm')
                  ) {
                    return data.url
                  }
                  throw new Error('ÎπÑÎîîÏò§ ÌååÏùºÏù¥Í±∞ÎÇò ÏùëÎãµ Ïò§Î•ò')
                },
              },
              {
                url: 'https://dog-api.kinduff.com/api/facts',
                handler: async (response) => {
                  throw new Error('Facts APIÎäî Ïù¥ÎØ∏ÏßÄ ÎØ∏Ï†úÍ≥µ')
                },
              },
              {
                url: 'https://api.woofbot.io/v1/woof',
                handler: async (response) => {
                  const data = await response.json()
                  if (data && data.image) {
                    return data.image
                  }
                  throw new Error('WoofBot API ÏùëÎãµ Ïò§Î•ò')
                },
              },
            ]

            let success = false
            for (const option of apiOptions) {
              try {
                const response = await fetch(option.url)
                if (!response.ok) continue
                dogUrl = await option.handler(response)
                success = true
                break
              } catch (optionError) {
                continue
              }
            }

            if (!success) {
              throw new Error('Î™®Îì† Random Dog API ÏòµÏÖò Ïã§Ìå®')
            }
          } catch (error) {
            const fallbackResponse = await fetch(
              'https://dog.ceo/api/breeds/image/random'
            )
            const fallbackData = await fallbackResponse.json()
            dogUrl = fallbackData.message
          }
          break

        default:
          const response = await fetch(
            'https://dog.ceo/api/breeds/image/random'
          )
          const data = await response.json()
          dogUrl = data.message
      }

      setAnimalStates((prev) => ({
        ...prev,
        dog: {
          showImage: true,
          imageUrl: dogUrl,
          loading: false,
          selectedApi: apiType,
        },
      }))
    } catch (error) {
      try {
        const fallbackResponse = await fetch(
          'https://dog.ceo/api/breeds/image/random'
        )
        if (fallbackResponse.ok) {
          const fallbackData = await fallbackResponse.json()
          setAnimalStates((prev) => ({
            ...prev,
            dog: {
              showImage: true,
              imageUrl:
                fallbackData.message ||
                '/placeholder.svg?height=300&width=400&text=üê∂ Í∞ïÏïÑÏßÄ Î°úÎìú Ïã§Ìå®',
              loading: false,
              selectedApi: apiType,
            },
          }))
        } else {
          throw new Error('ÏµúÏ¢Ö fallbackÎèÑ Ïã§Ìå®')
        }
      } catch (finalError) {
        setAnimalStates((prev) => ({
          ...prev,
          dog: {
            showImage: true,
            imageUrl:
              '/placeholder.svg?height=300&width=400&text=üê∂ Î™®Îì† API Ïã§Ìå®',
            loading: false,
            selectedApi: apiType,
          },
        }))
      }
    }
  }

  const tabs = [
    { id: 'emergency', name: 'Í∏¥Í∏â ÏÉÅÌô©', icon: AlertTriangleIcon },
    { id: 'professional', name: 'Ï†ÑÎ¨∏ ÏÉÅÎã¥', icon: UsersIcon },
    { id: 'selfcare', name: 'ÏûêÍ∞Ä Í¥ÄÎ¶¨', icon: HeartIcon },
    { id: 'help', name: 'ÎèÑÏõÄÎßê', icon: HelpCircleIcon },
  ]

  useEffect(() => {
    setIsVisible(true)
  }, [])

  useEffect(() => {
    const activeTabElement = tabRefs.current[activeTab]
    if (activeTabElement) {
      const { offsetWidth, offsetLeft } = activeTabElement
      setIndicatorStyle({
        width: offsetWidth,
        left: offsetLeft,
      })
    }
  }, [activeTab])

  const handleCall = (number) => {
    if (number.startsWith('www')) {
      window.open(`https://${number}`, '_blank')
    } else {
      window.open(`tel:${number}`)
    }
  }

  return (
    <div className="relative flex min-h-screen flex-col items-center overflow-auto bg-gradient-to-br from-rose-50 via-pink-50 to-red-50 p-3 dark:from-slate-900 dark:via-red-900 dark:to-pink-900 md:p-4">
      {/* Î∞∞Í≤Ω Ïù¥ÎØ∏ÏßÄ */}
      <div className="absolute inset-0 opacity-20 dark:opacity-10">
        <div
          className="h-full w-full bg-cover bg-center bg-no-repeat"
          style={{
            backgroundImage: `url('/placeholder.svg?height=1080&width=1920')`,
          }}
        />
      </div>

      {/* Î∂ÄÎìúÎü¨Ïö¥ Ïò§Î≤ÑÎ†àÏù¥ */}
      <div className="absolute inset-0 bg-gradient-to-b from-white/30 via-transparent to-white/20 dark:from-slate-900/50 dark:via-transparent dark:to-slate-900/30" />

      <div
        className={`relative z-10 mx-auto w-full max-w-5xl space-y-4 transition-all duration-1000 ease-out md:space-y-6 ${
          isVisible ? 'translate-y-0 opacity-100' : 'translate-y-8 opacity-0'
        }`}
      >
        {/* Ìó§Îçî */}
        <Card className="rounded-lg shadow-lg">
          <CardHeader className="rounded-t-lg bg-gradient-to-r from-red-500 via-rose-500 to-pink-500 p-4 text-white shadow-lg md:p-6">
            <CardTitle className="flex items-center justify-center gap-2 text-center text-2xl font-bold md:text-3xl">
              <AlertTriangleIcon
                className="h-6 w-6 md:h-8 md:w-8"
                aria-hidden="true"
              />
              Í∏¥Í∏â Ïã¨Î¶¨ÏßÄÏõê
            </CardTitle>
            <p className="mt-2 text-center text-sm text-red-100 md:text-base">
              ÏúÑÍ∏∞ ÏÉÅÌô©ÏóêÏÑú Ï¶âÏãú ÎèÑÏõÄÏùÑ Î∞õÏùÑ Ïàò ÏûàÎäî Ïó∞ÎùΩÏ≤òÏôÄ ÏûêÍ∞Ä Í¥ÄÎ¶¨ Î∞©Î≤ïÏùÑ
              Ï†úÍ≥µÌï©ÎãàÎã§
            </p>
          </CardHeader>
        </Card>

        {/* ÏùëÍ∏âÏÉÅÌô© ÏïåÎ¶º (ÏïÑÏù¥ÏΩòÏùÑ Î¨∏Ïû•Í≥º Í∞ôÏùÄ Ï§ÑÏóê ÌëúÏãú) */}
        <Alert className="border-red-200 bg-red-50/80 shadow-sm backdrop-blur-sm dark:bg-red-950/50">
          <AlertDescription className="m-0 flex items-center gap-2 text-sm text-red-800 dark:text-red-200 md:text-base">
            <AlertTriangleIcon
              className="h-4 w-4 shrink-0 text-red-600 md:h-5 md:w-5"
              aria-hidden="true"
            />
            <span>
              <strong>ÏùëÍ∏âÏÉÅÌô© Ïãú:</strong> ÏÉùÎ™ÖÏù¥ ÏúÑÌóòÌïòÎã§Í≥† ÎäêÎÅºÏãúÎ©¥ Ï¶âÏãú
              119Ïóê Ïã†Í≥†ÌïòÍ±∞ÎÇò Í∞ÄÍπåÏö¥ ÏùëÍ∏âÏã§Î°ú Í∞ÄÏÑ∏Ïöî.
            </span>
          </AlertDescription>
        </Alert>

        {/* ÌÉ≠ Î©îÎâ¥ */}
        <Card className="overflow-hidden border-0 bg-white/80 shadow-lg backdrop-blur-sm dark:bg-slate-800/80">
          {/* ÌòÑÎåÄÏ†ÅÏù∏ Ïõπ Ïä§ÌÉÄÏùº ÌÉ≠ ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò */}
          <div className="relative border-b border-gray-200 dark:border-gray-700">
            <nav
              className="scrollbar-hide relative -mb-px flex overflow-x-auto"
              aria-label="Tabs"
            >
              {tabs.map((tab) => (
                <button
                  key={tab.id}
                  ref={(el) => (tabRefs.current[tab.id] = el)}
                  onClick={() => setActiveTab(tab.id)}
                  className={`group relative min-w-0 flex-1 overflow-hidden px-2 py-3 text-center text-xs font-medium transition-all duration-200 focus:z-10 focus:outline-none md:px-4 md:py-4 md:text-sm ${
                    activeTab === tab.id
                      ? 'text-red-600 dark:text-red-400'
                      : 'text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300'
                  }`}
                  aria-current={activeTab === tab.id ? 'page' : undefined}
                >
                  <div className="flex flex-col items-center justify-center gap-1 md:flex-row md:gap-2">
                    <tab.icon
                      className={`h-4 w-4 transition-colors duration-200 md:h-5 md:w-5 ${
                        activeTab === tab.id
                          ? 'text-red-600 dark:text-red-400'
                          : 'text-gray-400 group-hover:text-gray-500'
                      }`}
                      aria-hidden="true"
                    />
                    <span className="whitespace-nowrap text-[10px] transition-colors duration-200 md:text-sm">
                      {tab.name}
                    </span>
                  </div>
                </button>
              ))}

              {/* Ïä¨ÎùºÏù¥Îî© Ïù∏ÎîîÏºÄÏù¥ÌÑ∞ */}
              <div
                className="absolute bottom-0 h-0.5 bg-gradient-to-r from-red-500 to-rose-500 transition-all duration-300 ease-out"
                style={{
                  width: `${indicatorStyle.width}px`,
                  transform: `translateX(${indicatorStyle.left}px)`,
                }}
              />
            </nav>
          </div>

          {/* ÌÉ≠ ÏΩòÌÖêÏ∏† */}
          <div className="p-4 md:p-6">
            {/* Í∏¥Í∏â ÏÉÅÌô© ÌÉ≠ */}
            {activeTab === 'emergency' && (
              <div className="animate-fadeIn space-y-6">
                <EmergencyFlowchart />

                <Card className="border-0 bg-white/60 shadow-md backdrop-blur-sm dark:bg-slate-800/60">
                  <CardHeader className="flex flex-row items-center justify-between">
                    <CardTitle className="text-xl font-bold text-gray-800 dark:text-gray-200">
                      24ÏãúÍ∞Ñ ÏÉÅÎã¥ Ïó∞ÎùΩÏ≤ò
                    </CardTitle>
                    <TooltipProvider>
                      <Tooltip>
                        <TooltipTrigger asChild>
                          <button
                            type="button"
                            aria-label="Î≤ïÏ†Å¬∑ÏùòÎ£å ÏïàÎÇ¥"
                            className="inline-flex items-center text-slate-500 hover:text-slate-700 dark:text-slate-300 dark:hover:text-slate-100"
                          >
                            <InfoIcon className="h-5 w-5" aria-hidden="true" />
                          </button>
                        </TooltipTrigger>
                        <TooltipContent className="max-w-xs text-sm leading-relaxed">
                          <p className="mb-1 font-semibold">
                            ÏïàÎÇ¥(Ï†ïÎ≥¥ Ï†úÍ≥µ Î™©Ï†Å)
                          </p>
                          <ul className="list-disc space-y-1 pl-4">
                            <li>
                              Î≥∏ ÏΩòÌÖêÏ∏†Îäî ÏùòÎ£å¬∑Î≤ïÎ•†Ï†Å ÏßÑÎã®Ïù¥ÎÇò ÏùëÍ∏â ÎåÄÏùëÏùÑ{' '}
                              <b>ÎåÄÏ≤¥ÌïòÏßÄ ÏïäÏïÑÏöî</b>.
                            </li>
                            <li>
                              ÏÉùÎ™Ö¬∑Ïã†Ï≤¥Ïùò Í∏âÎ∞ïÌïú ÏúÑÌóò Ïãú <b>Ï¶âÏãú 119</b>, Î≤îÏ£ÑÍ∞Ä
                              ÏùòÏã¨ÎêòÎ©¥ <b>112</b>.
                            </li>
                            <li>
                              ÏÉÅÎã¥ Ï§ë ÏúÑÏπò/Í∞úÏù∏Ï†ïÎ≥¥ Í≥µÏú†Îäî{' '}
                              <b>Î≥∏Ïù∏ ÌåêÎã® ÌïòÏóê ÏµúÏÜåÌôî</b>ÌïòÏÑ∏Ïöî.
                            </li>
                            <li>
                              Ïö¥ÏòÅÏãúÍ∞Ñ¬∑ÎåÄÍ∏∞ÏãúÍ∞ÑÏùÄ Í∏∞Í¥Ä/ÏßÄÏó≠ ÏÇ¨Ï†ïÏúºÎ°ú <b>Î≥ÄÎèô</b>
                              Îê† Ïàò ÏûàÏñ¥Ïöî.
                            </li>
                          </ul>
                        </TooltipContent>
                      </Tooltip>
                    </TooltipProvider>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    {emergencyContacts.map((contact, index) => (
                      <div
                        key={index}
                        className="flex transform flex-col gap-3 rounded-lg border border-slate-200/50 bg-gradient-to-r from-slate-50 to-white p-4 transition-all duration-300 ease-in-out hover:scale-[1.01] hover:shadow-md dark:border-slate-700/50 dark:from-slate-800/60 dark:to-slate-800/30 md:flex-row md:items-center md:justify-between md:hover:scale-[1.02]"
                      >
                        <div className="flex-1">
                          <h3 className="text-base font-semibold text-gray-800 dark:text-gray-200 md:text-lg">
                            {contact.name}
                          </h3>
                          <p className="whitespace-pre-line text-sm text-gray-600 dark:text-gray-400 md:text-base">
                            {contact.description}
                          </p>
                          <p className="font-mono text-sm text-purple-600">
                            {contact.number}
                          </p>
                        </div>
                        <div className="flex flex-col gap-2 sm:flex-row md:ml-4">
                          <Button
                            onClick={() => handleCall(contact.number)}
                            className="transform bg-gradient-to-r from-red-500 to-rose-500 text-white shadow-md transition-all duration-300 hover:scale-105 hover:from-red-600 hover:to-rose-600 hover:shadow-lg"
                          >
                            {contact.type === 'Ï†ÑÌôî' ? (
                              <PhoneIcon
                                className="mr-2 h-4 w-4"
                                aria-hidden="true"
                              />
                            ) : (
                              <ExternalLinkIcon
                                className="mr-2 h-4 w-4"
                                aria-hidden="true"
                              />
                            )}
                            {contact.type === 'Ï†ÑÌôî' ? 'Ï†ÑÌôîÌïòÍ∏∞' : 'Ï†ëÏÜçÌïòÍ∏∞'}
                          </Button>
                          <Button
                            onClick={() => copyNumber(contact.number)}
                            variant="outline"
                          >
                            <Copy className="mr-2 h-4 w-4" aria-hidden="true" />
                            Î≥µÏÇ¨
                          </Button>
                        </div>
                      </div>
                    ))}
                    {/* Î≤àÌò∏ Ï∂úÏ≤ò Í∞ÅÏ£º */}
                    <div className="pt-2 text-xs text-slate-500 dark:text-slate-400">
                      <Popover>
                        <PopoverTrigger asChild>
                          <button
                            type="button"
                            className="inline-flex items-center gap-1 hover:underline"
                            aria-label="Î≤àÌò∏ Ï∂úÏ≤ò ÏïàÎÇ¥"
                          >
                            <InfoIcon className="h-4 w-4" aria-hidden="true" />
                            Ï∂úÏ≤ò Î≥¥Í∏∞
                          </button>
                        </PopoverTrigger>
                        <PopoverContent className="w-80 text-sm leading-relaxed">
                          <p className="mb-2 font-semibold">Ï£ºÏöî Î≤àÌò∏(ÏöîÏïΩ)</p>
                          <ul className="space-y-1">
                            <li>
                              <b>119</b> ‚Äî ÌôîÏû¨¬∑Íµ¨Í∏â¬∑Íµ¨Ï°∞ Í∏¥Í∏âÏã†Í≥†
                            </li>
                            <li>
                              <b>112</b> ‚Äî Î≤îÏ£Ñ Í∏¥Í∏âÏã†Í≥†
                            </li>
                            <li>
                              <b>1577-0199</b> ‚Äî Ï†ïÏã†Í±¥Í∞ï <b>ÏúÑÍ∏∞ÏÉÅÎã¥Ï†ÑÌôî</b>{' '}
                              (24ÏãúÍ∞Ñ)
                            </li>
                            <li>
                              <b>129</b> ‚Äî <b>Î≥¥Í±¥Î≥µÏßÄÏÉÅÎã¥ÏÑºÌÑ∞</b>{' '}
                              (Í∏¥Í∏âÎ≥µÏßÄ/ÌïôÎåÄ/Î≥µÏßÄÏÇ¨Í∞Å)
                            </li>
                            <li>
                              <b>1366</b> ‚Äî <b>Ïó¨ÏÑ±Í∏¥Í∏âÏ†ÑÌôî</b> (24ÏãúÍ∞Ñ)
                            </li>
                            <li>
                              <b>1388</b> ‚Äî <b>Ï≤≠ÏÜåÎÖÑÏÉÅÎã¥Ï†ÑÌôî</b> / #1388 Î¨∏Ïûê
                            </li>
                          </ul>
                          <p className="mt-2 text-[11px] text-slate-500">
                            ÏïàÎÇ¥Îäî ÏöîÏïΩÏù¥Î©∞, ÏÉÅÏÑ∏ Í∏∞Ï§Ä¬∑Ïö¥ÏòÅÏùÄ Í∏∞Í¥Ä Í≥µÏßÄÏóê
                            Îî∞Î¶ÖÎãàÎã§.
                          </p>
                        </PopoverContent>
                      </Popover>
                    </div>
                  </CardContent>
                </Card>
              </div>
            )}

            {/* Ï†ÑÎ¨∏ ÏÉÅÎã¥ ÌÉ≠ */}
            {activeTab === 'professional' && (
              <div className="animate-fadeIn space-y-6">
                <SpecializedServices />
                <RegionalServices />
              </div>
            )}

            {/* ÏûêÍ∞Ä Í¥ÄÎ¶¨ ÌÉ≠ */}
            {activeTab === 'selfcare' && (
              <div className="animate-fadeIn space-y-6">
                <Card className="border-0 bg-white/60 shadow-md backdrop-blur-sm dark:bg-slate-800/60">
                  <CardHeader>
                    <CardTitle className="text-xl font-bold text-gray-800 dark:text-gray-200">
                      Ï¶âÏãú Ìï† Ïàò ÏûàÎäî ÏûêÍ∞Ä Í¥ÄÎ¶¨
                    </CardTitle>
                    <p className="text-sm text-gray-600 dark:text-gray-400">
                      ÌòºÏûêÏÑúÎèÑ Ìï† Ïàò ÏûàÎäî ÎßàÏùå ÎèåÎ¥Ñ Î∞©Î≤ïÎì§ÏùÑ ÏïàÎÇ¥Ìï¥ÎìúÎ¶ΩÎãàÎã§.
                    </p>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    {selfCareResources.map((resource, index) => (
                      <div
                        key={index}
                        className={`transform rounded-lg border border-slate-200/50 p-4 transition-all duration-300 ease-in-out hover:scale-[1.01] hover:bg-gradient-to-r hover:from-red-50/50 hover:to-rose-50/50 hover:shadow-md dark:border-slate-600/50 dark:hover:from-slate-700/50 dark:hover:to-slate-600/50 md:hover:scale-[1.02] ${
                          resource.type === 'breath' && breathingOpen
                            ? 'bg-gradient-to-r from-red-50/60 to-rose-50/60 ring-1 ring-rose-200/50 dark:from-slate-700/60 dark:to-slate-600/60'
                            : ''
                        }`}
                      >
                        <div className="mb-3 flex flex-col gap-3 md:flex-row md:items-start md:justify-between">
                          <div className="flex-1">
                            <h3 className="mb-2 text-base font-semibold text-gray-800 dark:text-gray-200 md:text-lg">
                              {resource.title}
                            </h3>
                            <p className="mb-2 text-sm text-gray-600 dark:text-gray-400 md:text-base">
                              {resource.description}
                            </p>
                            <p className="text-sm text-gray-500 dark:text-gray-400">
                              {resource.detail}
                            </p>
                          </div>
                          {!resource.apis && (
                            <Button
                              onClick={() => {
                                if (resource.type === 'breath') {
                                  setBreathingOpen((v) => !v)
                                } else if (resource.type === 'cat') {
                                  fetchCatImage('randomcat')
                                } else if (resource.type === 'dog') {
                                  fetchDogImage('randomdog')
                                }
                              }}
                              disabled={
                                resource.type &&
                                animalStates[resource.type]?.loading
                              }
                              variant="outline"
                              className="w-full transform border-red-300 bg-transparent text-red-600 transition-all duration-300 hover:scale-105 hover:border-red-400 hover:bg-gradient-to-r hover:from-red-50 hover:to-rose-50 md:ml-4 md:w-auto"
                            >
                              {resource.type &&
                              animalStates[resource.type]?.loading ? (
                                <RefreshCwIcon className="mr-2 h-4 w-4 animate-spin" />
                              ) : null}
                              {resource.action}
                            </Button>
                          )}
                        </div>

                        {/* Ìò∏Ìù° Ïö¥Îèô Ïù∏ÎùºÏù∏ Î†åÎçîÎßÅ */}
                        {resource.type === 'breath' && (
                          <div className="overflow-visible">
                            <BreathingExercise
                              inline
                              open={breathingOpen}
                              onOpenChange={setBreathingOpen}
                            />
                          </div>
                        )}

                        {/* ÎèôÎ¨º Ïù¥ÎØ∏ÏßÄ ÌëúÏãú ÏòÅÏó≠ */}
                        {resource.type &&
                          animalStates[resource.type]?.showImage &&
                          animalStates[resource.type]?.imageUrl && (
                            <div className="animate-fadeIn mt-4 text-center">
                              <div className="relative inline-block overflow-hidden rounded-lg shadow-lg">
                                <img
                                  src={
                                    animalStates[resource.type]?.imageUrl ||
                                    '/placeholder.svg'
                                  }
                                  onError={(e) => {
                                    e.currentTarget.src = '/placeholder.svg'
                                  }}
                                  alt={
                                    resource.type === 'cat'
                                      ? 'Í∑ÄÏó¨Ïö¥ Í≥†ÏñëÏù¥'
                                      : 'Í∑ÄÏó¨Ïö¥ Í∞ïÏïÑÏßÄ'
                                  }
                                  className="h-auto max-h-[80vh] w-auto max-w-full rounded-lg object-contain transition-all duration-500"
                                  crossOrigin="anonymous"
                                />
                                <div className="pointer-events-none absolute inset-0 rounded-lg bg-gradient-to-t from-black/10 to-transparent"></div>
                              </div>
                              <div className="mt-3 flex justify-center gap-2">
                                <Button
                                  onClick={() =>
                                    resource.type === 'cat'
                                      ? fetchCatImage(
                                          animalStates[resource.type]
                                            ?.selectedApi || 'cataas'
                                        )
                                      : fetchDogImage(
                                          animalStates[resource.type]
                                            ?.selectedApi || 'dogceo'
                                        )
                                  }
                                  disabled={
                                    animalStates[resource.type]?.loading ||
                                    false
                                  }
                                  size="sm"
                                  className={`$${
                                    resource.type === 'cat'
                                      ? 'bg-gradient-to-r from-pink-400 to-rose-400 hover:from-pink-500 hover:to-rose-500'
                                      : 'bg-gradient-to-r from-amber-400 to-orange-400 hover:from-amber-500 hover:to-orange-500'
                                  } text-white disabled:opacity-50`}
                                >
                                  {animalStates[resource.type]?.loading ? (
                                    <RefreshCwIcon className="mr-2 h-4 w-4 animate-spin" />
                                  ) : null}
                                  ÏÉàÎ°úÏö¥{' '}
                                  {resource.type === 'cat'
                                    ? 'Í≥†ÏñëÏù¥'
                                    : 'Í∞ïÏïÑÏßÄ'}{' '}
                                  Î≥¥Í∏∞ {resource.type === 'cat' ? 'üêæ' : 'üêï'}
                                </Button>
                                <Button
                                  onClick={() =>
                                    setAnimalStates((prev) => ({
                                      ...prev,
                                      [resource.type || '']: {
                                        ...prev[resource.type || ''],
                                        showImage: false,
                                      },
                                    }))
                                  }
                                  size="sm"
                                  variant="outline"
                                  className="border-gray-300 text-gray-600 hover:bg-gray-50"
                                >
                                  Ïà®Í∏∞Í∏∞
                                </Button>
                              </div>
                            </div>
                          )}
                      </div>
                    ))}
                  </CardContent>
                </Card>
              </div>
            )}

            {/* ÎèÑÏõÄÎßê ÌÉ≠ */}
            {activeTab === 'help' && (
              <div className="animate-fadeIn space-y-6">
                <FAQSection />
              </div>
            )}
          </div>
        </Card>

        {/* ÌïòÎã® Î©îÏãúÏßÄ */}
        <Card className="border-0 bg-gradient-to-br from-red-100/80 via-rose-100/80 to-pink-100/80 shadow-lg backdrop-blur-sm dark:from-red-900/50 dark:via-rose-900/50 dark:to-pink-900/50">
          <CardContent className="p-6 text-center">
            <h3 className="mb-2 text-lg font-semibold text-red-800 dark:text-red-200">
              ÌòºÏûêÍ∞Ä ÏïÑÎãôÎãàÎã§
            </h3>
            <p className="mb-4 text-red-700 dark:text-red-300">
              Ïñ¥Î†§Ïö¥ ÏãúÍ∞ÑÏùÑ Î≥¥ÎÇ¥Í≥† Í≥ÑÏãúÏßÄÎßå, ÎèÑÏõÄÏùÑ Î∞õÏùÑ Ïàò ÏûàÎäî Î∞©Î≤ïÏù¥
              ÏûàÏäµÎãàÎã§. Ï†ÑÎ¨∏Í∞ÄÎì§Ïù¥ ÎãπÏã†ÏùÑ ÎèÑÏö∏ Ï§ÄÎπÑÍ∞Ä ÎêòÏñ¥ ÏûàÏäµÎãàÎã§.
            </p>
            <Link href="/ai-chat">
              <Button className="transform bg-gradient-to-r from-red-500 to-pink-500 text-white shadow-md transition-all duration-300 hover:scale-105 hover:from-red-600 hover:to-pink-600 hover:shadow-lg">
                <MessageSquareIcon
                  className="mr-2 h-4 w-4"
                  aria-hidden="true"
                />
                AIÏôÄ ÎåÄÌôîÌïòÍ∏∞
              </Button>
            </Link>
          </CardContent>
        </Card>

        {/* ÌïòÎã® Ïó¨Î∞± Ï∂îÍ∞Ä */}
        <div className="h-8"></div>
      </div>
    </div>
  )
}

export default EmergencyPage
